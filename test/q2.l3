(define empty?
  (lambda (lst)
    (if (eq? lst '())
    #t
    #f
    )
   )
)

(define length
   (lambda (lst)
      (if (empty? lst)
         0
         (+ 1 (length(cdr lst))))
   )
)

(define last-element
   (lambda (lst)
      (if (empty? lst)
         '()
         (if (empty? (cdr lst))
            (car lst)
            (last-element(cdr lst))))
  )
)

(define power
   (lambda (n1 n2)
      (if (= n2 0)
         1
         (* n1 (power n1 (- n2 1))))
   )
)

(define sum-lst-power
   (lambda (lst n)
      (if (empty? lst)
         0
         (+ (power(car lst) n) (sum-lst-power (cdr lst) n)))
    )
)

  
(define num-from-digits
  (lambda (lst)
      (if (empty? lst)
         0
         (+ (* (car lst) (power 10 (- (length lst) 1))) (num-from-digits (cdr lst))))
  )
)

(define is-narcissistic
  (lambda (lst)
      (if (= (sum-lst-power lst (length lst)) (num-from-digits lst))
         #t
         #f
      )
    )
)
 
